<?php


namespace Tests;


use Illuminate\Testing\TestResponse;
use PHPUnit\Exception;
use PHPUnit\Framework\Assert as PHPUnit;
use PHPUnit\Framework\ExpectationFailedException;

trait MakesJsonApiRequests
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        TestResponse::macro(
            'assertJsonApiValidationErrors',
            $this->assertJsonApiValidationErrors()
        );
    }

    /**
     * Call the given URI with a JSON request.
     *
     * @param string $method
     * @param string $uri
     * @param array $data
     * @param array $headers
     * @return \Illuminate\Testing\TestResponse
     */
    public function json($method, $uri, array $data = [], array $headers = [])
    {
        $headers['accept'] = 'application/vnd.api+json';
        return parent::json($method, $uri, $data, $headers);
    }

    /**
     * Visit the given URI with a POST request, expecting a JSON response.
     *
     * @param string $uri
     * @param array $data
     * @param array $headers
     * @return \Illuminate\Testing\TestResponse
     */
    public function postJson($uri, array $data = [], array $headers = [])
    {
        $headers['content-type'] = 'application/vnd.api+json';

        return parent::postJson($uri, $data, $headers);
    }

    public function patchJson($uri, array $data = [], array $headers = [])
    {
        $headers['content-type'] = 'application/vnd.api+json';

        return parent::patchJson($uri, $data, $headers);
    }

    /**
     * @return \Closure
     */
    protected function assertJsonApiValidationErrors(): \Closure
    {
        return function ($attribute) {
            /**@var TestResponse $this * */
            try {
                $this->assertJsonFragment([
                    'source' => ['pointer' => "/data/attributes/{$attribute}"]
                ]);
            }catch (ExpectationFailedException $exception){
                PHPUnit::fail(
                    "Failed to find a JSON:API validation error for key: $attribute"
                    .PHP_EOL.PHP_EOL.
                    $exception->getMessage()
                );
            }

            try {
                $this->assertJsonStructure([
                    'errors' => [
                        '*' => [
                            'title', 'detail', 'source' => ['pointer']
                        ]
                    ]
                ]);
            }catch (ExpectationFailedException $exception){
                PHPUnit::fail(
                    "Failed to find a JSON:API error response"
                    .PHP_EOL.PHP_EOL.
                    $exception->getMessage()
                );
            }



            $this->assertHeader(
                'content-type', 'application/vnd.api+json'
            );
            $this->assertStatus(422);
        };
    }
}
